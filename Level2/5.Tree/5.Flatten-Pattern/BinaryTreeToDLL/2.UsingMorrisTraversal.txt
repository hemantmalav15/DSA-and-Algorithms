class Node
{
	Node left, right;
	int data;
	
	Node(int d)
	{
		data = d;
		left = right = null;
	}
}
 /**
 * @param root
 * @return
 */
Node bToDLL(Node root)
    {
        if(root == null){
            return null;
        }
        Node prev = null;
        Node head = null;
        
        Node curr = root;
        
        while(curr != null){
         
         if(curr.left == null){
             
    //=============this is extra work in morris traversal
             if(prev == null){
                 head = curr;
             }
             else{
                 prev.right = curr;
                 curr.left = prev;
             }
             prev = curr;
     //==============================
             curr = curr.right;
         }
         
         else{
             //find predecessor
             Node predecessor = curr.left;
             while(predecessor.right != null && predecessor.right != curr){
                 predecessor = predecessor.right;
             }
             
             //create link
             if(predecessor.right == null){
                 predecessor.right = curr;
                 curr = curr.left;
             }
             else{
                 
    //=============this is extra work in morris traversal
             if(prev == null){
                 head = curr;
             }
             else{
                 prev.right = curr;
                 curr.left = prev;
             }
             prev = curr;
     //==============================
                 curr = curr.right;
             }
         }
        }
        return head;
    }