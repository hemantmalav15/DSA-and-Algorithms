public class TreeNode {
      int val;
      TreeNode left;
      TreeNode right;
      TreeNode() {}
      TreeNode(int val) { this.val = val; }
      TreeNode(int val, TreeNode left, TreeNode right) {
          this.val = val;
          this.left = left;
          this.right = right;
      }
  }
class Solution {
    
    ====================== This is the brute force approach ==========================

    public TreeNode helper(TreeNode root){
        
        if(root == null){
            return null;
        }
        if(root.left == null && root.right == null){
            return root;
        }
        TreeNode left = helper(root.left);
        TreeNode right = helper(root.right);
        
        TreeNode leftNode = root.left;
        TreeNode rightNode = root.right;
        
        root.left = null;
        TreeNode leftTail = leftNode;
        while(leftTail != null && leftTail.right != null){
            leftTail = leftTail.right;
        }
        if(leftTail != null){
            leftTail.right = rightNode;
        }
        if(leftNode != null){
            root.right = leftNode;
        }
        return root;
    }
    
    ===================== this is our main function======================================

    public void flatten(TreeNode root) {
        if(root != null){
            helper(root);
        }
    }
}